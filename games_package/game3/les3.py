# Задание №3
# Напишите декоратор, который сохраняет в json файл
# параметры декорируемой функции и результат, который она
# возвращает. При повторном вызове файл должен
# расширяться, а не перезаписываться.
# Каждый ключевой параметр сохраните как отдельный ключ
# json словаря.
# Для декорирования напишите функцию, которая может
# принимать как позиционные, так и ключевые аргументы.
# Имя файла должно совпадать с именем декорируемой
# функции.

import json  # Импортируем модуль json для работы с JSON файлами.
import os    # Импортируем модуль os для работы с файловой системой.

# Создаем декоратор save_to_json, который будет сохранять параметры и результат декорируемой функции в JSON файле.
def save_to_json(func):
    # Создаем обертку (wrapper) для декоратора, которая будет вызывать декорируемую функцию и сохранять данные.
    def wrapper(*args, **kwargs):
        # Вызываем декорируемую функцию и сохраняем её результат.
        result = func(*args, **kwargs)

        # Генерируем имя файла на основе имени декорируемой функции.
        filename = f"{func.__name__}.json"

        # Создаем или открываем файл JSON для записи.
        if not os.path.exists(filename):  # Проверяем, существует ли файл.
            data = []  # Если файл не существует, создаем пустой список данных.
        else:
            with open(filename, 'r') as file:
                data = json.load(file)  # Если файл существует, загружаем данные из него.

        # Создаем запись с параметрами функции и результатом.
        entry = {
            "args": args,    # Сохраняем позиционные аргументы функции.
            "kwargs": kwargs,  # Сохраняем ключевые аргументы функции.
            "result": result  # Сохраняем результат выполнения функции.
        }

        # Добавляем запись в список данных и сохраняем их в файл.
        data.append(entry)
        with open(filename, 'w') as file:
            json.dump(data, file, indent=4)  # Записываем данные в файл с отступами для удобства чтения.

        return result  # Возвращаем результат выполнения декорируемой функции.

    return wrapper  # Возвращаем обертку (wrapper) декоратора.

# Пример использования декоратора для декорируемой функции.
@save_to_json
def example_function(x, y=0):
    return x + y

# Пример вызова декорированной функции.
result = example_function(3, y=2)
print(f"Результат: {result}")

# После вызова декорированной функции будет создан файл "example_function.json" с данными.
